<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dengrc的博客</title>
    <description>Dengrc的博客</description>
    <link>http://dengrc.com/</link>
    <atom:link href="http://dengrc.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 May 2016 16:41:41 +0800</pubDate>
    <lastBuildDate>Fri, 20 May 2016 16:41:41 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Redux的简单理解</title>
        <description>&lt;h3 id=&quot;reduxviewdispatchactionreducerstatestorestorestate&quot;&gt;Redux大致的流程就是在&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;中触发某个组件的事件然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;把带有一些需要传递的属性通过某种类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;派发给某个&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;进行处理后返回一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;给&lt;code class=&quot;highlighter-rouge&quot;&gt;Store&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Store&lt;/code&gt;会根据&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;更新某个组件。&lt;/h3&gt;

&lt;h2 id=&quot;redux&quot;&gt;Redux&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;View（视图层）&lt;/p&gt;

    &lt;p&gt;用户对&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;中的组件进行操作后，触发&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Action（需要触发的动作）&lt;/p&gt;

    &lt;p&gt;每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;都是一个函数，里面返回一个JavaScript对象，对象中包含一个&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;属性（用来对&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;说明动作的类型）和一些需要传递的属性（可以通过参数获取）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reducer&lt;/p&gt;

    &lt;p&gt;也是一个函数，它有两个参数，第一个参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;previousState&lt;/code&gt;（以前的状态），另外一个是&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;，根据&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;返回的对象来对&lt;code class=&quot;highlighter-rouge&quot;&gt;previousState&lt;/code&gt;做出相应处理，并返回一个新的对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Store（数据层）&lt;/p&gt;

    &lt;p&gt;保存整个应用的状态，监听&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;，提醒&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;更新，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;createStore(reducers)&lt;/code&gt;来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Store&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;connect (连接Redux)&lt;/p&gt;

    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Provider&lt;/code&gt;把根组件包装后，需要在根组件内使用&lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt;才可以获得全局的&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;和一个&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch  (派发器)&lt;/p&gt;

    &lt;p&gt;接收&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;，把它派发给&lt;code class=&quot;highlighter-rouge&quot;&gt;Reducer&lt;/code&gt;进行处理后返还给&lt;code class=&quot;highlighter-rouge&quot;&gt;Store&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 +0800</pubDate>
        <link>http://dengrc.com/2016/05/02/Redux%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://dengrc.com/2016/05/02/Redux%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
        
        
        <category>学习</category>
        
      </item>
    
      <item>
        <title>Webpack小结</title>
        <description>&lt;h3 id=&quot;balabalabalawebpack&quot;&gt;为了跟上前端技术那BalaBalaBala更新的脚步，昨天晚上就像打了鸡血一样找了一系列与的webpack有关的内容来看，然后就总结了一下如何对它进行配置。&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;步入正题：&lt;/h2&gt;

&lt;p&gt;npm是Node.js的模块依赖管理工具，所以需要先安装Node.js，不能翻墙的时候推荐使用(&lt;a href=&quot;https://npm.taobao.org/&quot;&gt;淘宝NPM镜像&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;新建一个目录,它里面的项目结构如下:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app/
    &lt;ul&gt;
      &lt;li&gt;entry.js(入口文件)&lt;/li&gt;
      &lt;li&gt;components/(存放组件目录)&lt;/li&gt;
      &lt;li&gt;static/(存放静态资源)
        &lt;ul&gt;
          &lt;li&gt;css/&lt;/li&gt;
          &lt;li&gt;images/&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;package.json&lt;/li&gt;
  &lt;li&gt;webpack.config.js(webpack的配置文件)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;(&lt;a href=&quot;https://github.com/ericdum/mujiang.info/issues/6/&quot;&gt;package.json介绍&lt;/a&gt;)。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;webpack&quot;&gt;安装webpack&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt;参数表示把webpack作为项目依赖包，会在&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;写入相关的配置信息。&lt;/p&gt;

&lt;p&gt;如果需要在多个项目中使用webpack时，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt;参数进行全局安装。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install webpack --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;webpack-1&quot;&gt;webpack配置&lt;/h2&gt;

&lt;p&gt;现在已经可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;里面对它进配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// webpack.config.js

//引入Node的path模块，使用resolve方法转换成绝对路径
var path = require(&#39;path&#39;);

//定义一些路径
var ROOT_PATH = path.resolve(__dirname);
var APP_PATH = path.resolve(__dirname,&#39;app&#39;);
var BUILD_PATH = path.resolve(__dirname,&#39;build&#39;);

//webpack配置信息
module.exports = {
    //入口文件配置
    entry:path.resolve(APP_PATH,&#39;entry.js&#39;),
    //输出配置
    output:{
        path:APP_PATH,
        filename:&#39;build.js&#39;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;路径&lt;code class=&quot;highlighter-rouge&quot;&gt;path.resolve([from],to)&lt;/code&gt;方法进行指向，&lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname&lt;/code&gt;表示根目录。&lt;/p&gt;

&lt;p&gt;尽量不要使用拼接字符串方式！&lt;br /&gt;
尽量不要使用拼接字符串方式！！&lt;br /&gt;
尽量不要使用拼接字符串方式！！！&lt;/p&gt;

&lt;p&gt;重要的事情说三遍！拼接有坑，爱信不信~反正我是被坑过~ ~！！！&lt;/p&gt;

&lt;h3 id=&quot;entry&quot;&gt;entry：&lt;/h3&gt;

&lt;p&gt;用来配置app的入口。入口可以是一个，也可以是多个，所以可以使用对象来定义多个入口文件。&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;output：&lt;/h3&gt;

&lt;p&gt;用来配置怎么把文件输出。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;表示app打包后的路径。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt;打包后的文件名字。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//entry.js  

var h1 = document.createElement(&#39;h1&#39;);
h1.innerText = &quot;Hello world!&quot;;
document.body.appendChild(h1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;哈哈，没错，就是这经典的Hello world！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webpack -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用webpack来打包&lt;/p&gt;

&lt;h3 id=&quot;webpack-2&quot;&gt;Webpack的常用参数：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;  参数表示对打包后的文件进行压缩。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;  监听文件改动，一但发现文件改动会实时打包更新。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;  使用&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html&quot;&gt;SourceMaps&lt;/a&gt;,帮助我们调试。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--colors&lt;/code&gt;  输出结果有颜色。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;添加文件：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;手动新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;文件，再把&lt;code class=&quot;highlighter-rouge&quot;&gt;build.js&lt;/code&gt;引进去后打开这个文件就可以看到&lt;/p&gt;

&lt;h1 id=&quot;hello-world&quot;&gt;Hello World！&lt;/h1&gt;

&lt;p&gt;但是！但是！！但是！！！这样是不是太麻烦了？&lt;/p&gt;

&lt;p&gt;没事，webpack中有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt;属性可以用来配置一些插件，其中就有可以自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;html-webpack-plugin&lt;/code&gt;的插件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install html-webpack-plugin --save-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把它安装到我们项目后，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js

//引入自动生成html的插件
var htmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);  


module.exports = {
    ...
    //插件配置
    plugins:[
        //每次打包都会重新生成html文件
        new HtmlWebpackPlugin()
    ]
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在已经配置了   &lt;a href=&quot;https://www.npmjs.com/package/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; 每次使用webpack把文件打包后都会重新生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;把前面生成的的&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;文件夹删除，再运行’webpack -p’后会生成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build/
    &lt;ul&gt;
      &lt;li&gt;build.js&lt;/li&gt;
      &lt;li&gt;index.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugins&quot;&gt;plugins:&lt;/h3&gt;

&lt;p&gt;前面已经知道&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt;属性是用来干嘛的。&lt;/p&gt;

&lt;p&gt;现在试试设置多个入口文件，使用插件把一些公用库设成全局变量不用再在每个文件都引入，顺便把他们打包成一个文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react react-dom --save-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config  
...
var webpack = require(&#39;webpack&#39;);
module.exports = {
    ...
    entry:{
        app:path.resolve(APP_PATH,&#39;entry&#39;),
        common:[&#39;react&#39;,&#39;react-dom&#39;]
    },
    ...
    resolve: {
        //设置文件格式为js或jsx可以直接require
        extensions: [&#39;&#39;,&#39;.js&#39;, &#39;.jsx&#39;]
    },
    plugins:[
        ...
        //定义全局变量
        new Webpack.ProvidePlugin({
            React: &#39;react&#39;,
            ReactDOM: &#39;react-dom&#39;
        }),
        //用来提取entry里面设置的common，把里面的js合并成common.js
        new Webpack.optimize.CommonsChunkPlugin(&#39;common&#39;, &#39;common.js&#39;)
    ]
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack -p&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;目录已经变成这样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build
    &lt;ul&gt;
      &lt;li&gt;build.js&lt;/li&gt;
      &lt;li&gt;common.js&lt;/li&gt;
      &lt;li&gt;index.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在已经不用在js里面&lt;code class=&quot;highlighter-rouge&quot;&gt;require(&#39;react&#39;)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;require(&#39;react-dom&#39;)&lt;/code&gt;就可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt;直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;框架。&lt;/p&gt;

&lt;h3 id=&quot;webpack-loader&quot;&gt;webpack-loader：&lt;/h3&gt;

&lt;p&gt;上面已经引入了 &lt;a href=&quot;https://hulufei.gitbooks.io/react-tutorial/content/&quot;&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它可以使用&lt;a href=&quot;http://reactjs.cn/react/docs/jsx-in-depth.html&quot;&gt;JSX语法&lt;/a&gt;更便捷的进行开发，但是需要使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;babel&lt;/a&gt;，它可以把’JSX’、’ES6’等语法转换成浏览器可以识别的代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install babel -g
npm install babel-loader babel-preset-es2015 babel-preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要先安装&lt;code class=&quot;highlighter-rouge&quot;&gt;babel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js  
...
module.exports = {
    ...
    module: {
        loaders: [{
            test: /\.(js|jsx)$/, //正则匹配.js或jsx的文件
            loader: &#39;babel&#39;, //使用babel-loader处理该文件
            include: APP_PATH, //指定为app目录下的文件
            query: {
                presets: [&#39;es2015&#39;, &#39;react&#39;], //把使用ES6和JSX语法的文件转换成浏览器可以识别的JS文件
            }
        }]
    },
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加文件：&lt;/strong&gt;&lt;br /&gt;
在components里面新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ColorCtrl.jsx&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//ColorCtrl.jsx&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ColorCtrl&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这是一个单双数变色的组件并且把它导出。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//entry.js
...  
//引入ColorCtrl
import Color from &#39;./components/ColorCtrl&#39;;
var div =document.createElement(&#39;div&#39;);
document.body.appendChild(div);
ReactDOM.render(
    &amp;lt;Color pNum={1} /&amp;gt;,
    div
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack -p&lt;/code&gt;，现在&lt;code class=&quot;highlighter-rouge&quot;&gt;JSX&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ES6&lt;/code&gt;语法编写的文件已经被转换成浏览器可以兼容的js文件了。&lt;/p&gt;

&lt;p&gt;在浏览器打开&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;已经可以看到随着单数蓝色双数红色的变换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;loader&lt;/code&gt;干更多的事情：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sass-loader&lt;/code&gt; 可以把&lt;a href=&quot;http://www.sasschina.com/guide/&quot;&gt;sass&lt;/a&gt;(css预处理器)转换成css          &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;node-loader&lt;/code&gt;  sass-loader的依赖&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;css-loader&lt;/code&gt; 可以用来读取css文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style-loader&lt;/code&gt; 把css当成一个模块插入到页面中&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;url-loader&lt;/code&gt; 用来获取一些路径中的图片，并按设定的文件大小决定是否转成&lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt;编码&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;file-loader&lt;/code&gt; 是url-loader需要的依赖&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expose-loader&lt;/code&gt; 可以导出一些全局变量&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装上述的loader：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install sass-loader node-sass css-loader style-loader url-loader file-loader --save-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js
...
module.exports = {
    ...
    module: {
        loaders: [
        ...
        {
            //从右往左处理样式文件
            test: /\.(css|scss)$/,
            loaders: [&#39;style&#39;, &#39;css&#39;, &#39;sass&#39;],
            include: APP_PATH,
        }, {
            //处理图片，小于20k的图片转成base64
            test: /\.(png|jpg|gif)$/,
            loader: &#39;url?limit=20480&#39;
        }]
    },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加文件：&lt;/strong&gt;&lt;br /&gt;
在static/css里面新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;main.scss&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//main.scss

$green:green;
body{
    background: url(../images/monkey.png) no-repeat center;
    background-color: $green;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//entry.js
...
require(../static/css/main);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用webpack重新打包，打开&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;，样式已经被内联在里面了，小于20k的图片也被转成了&lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt;编码。&lt;/p&gt;

&lt;p&gt;已凑齐三原色召唤出一只程序猿了~ ~！！！&lt;/p&gt;

&lt;h3 id=&quot;webpack-dev-server&quot;&gt;webpack-dev-server&lt;/h3&gt;

&lt;p&gt;一个小型的静态文件服务器，当代码保存后它会让浏览器自动刷新&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install webpack-dev-server webpack-dev-middleware --save-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js
...
module.exports = {
    ...
    plugins: [
        ...
        //热模块替换
        new Webpack.HotModuleReplacementPlugin(),
    ],
    ...
    devServer: {
        hot: true, //开启HMR 热模块替换
        inline: true, //代码改动后刷新浏览器
        progress: true, //进度展示
        proxy: {  //重定向请求
            &#39;/rest/*&#39;: {
                target: &#39;http://127.0.0.1:80&#39;,
                secure: false
            },
            &#39;/ajax/*&#39;: {
                target: &#39;http://127.0.0.1:81&#39;,
                secure: false
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;后访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;，修改文件已经会自动刷新浏览器了。&lt;/p&gt;

&lt;h3 id=&quot;open-browser-webpack-plugin&quot;&gt;open-browser-webpack-plugin&lt;/h3&gt;
&lt;p&gt;可以在启动webpack后自动在浏览器上打开&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;
    npm install open-browser-webpack-plugin –save-dev&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js
...
//引入自动打开浏览器的插件
var OpenBrowserPlugin = require(&#39;open-browser-webpack-plugin&#39;);
module.exports = {
    ...
    plugins: [
        ...
        //自动打开浏览器
        new OpenBrowserPlugin({url: &#39;http://localhost:8080&#39;}),
    ],
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在每次运行&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;都会自动在浏览器打开&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;react-transform&quot;&gt;react-transform&lt;/h3&gt;
&lt;p&gt;如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;进行复杂项目开发时，每次修改完代码后都需要刷新重新操作回到某个步骤的话必定很烦人。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install babel-plugin-react-transform babel-preset-react-hmre react-transform-catch-errors react-transform-hmr redbox-react --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//webpack.config.js
...
module.exports = {
    ...
    output:{
        ...
        publicPath:&#39;/static/&#39; //网站运行时访问的路径
    },
    plugins:[
        ...
        // new HtmlWebpackPlugin(),
        ...
        // new Webpack.HotModuleReplacementPlugin(),
        ...
    ],
    ...
    module:{
        loaders: [{
            //处理ES6跟jsx语法
            test: /\.(js|jsx)$/,
            loader: &#39;babel&#39;,
            include: APP_PATH,
            query: {
                presets: [&#39;es2015&#39;, &#39;react&#39;],
                plugins: [
                    [
                        &#39;react-transform&#39;, {
                            transforms: [{
                                transform: &#39;react-transform-hmr&#39;,
                                imports: [&#39;react&#39;],
                                locals: [&#39;module&#39;]
                            }, {
                                transform: &#39;react-transform-catch-errors&#39;,
                                imports: [&#39;react&#39;, &#39;redbox-react&#39;]
                            }]
                        }
                    ]
                ]
            }
        },
        ...
        ]
    }

}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//package.json
&quot;scripts&quot;: {
    &quot;dev&quot;:&quot;webpack-dev-server --inline --hot --content-base public&quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加文件：&lt;/strong&gt;&lt;br /&gt;
在根目录下新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;目录，添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;br /&gt;
引入打包后所依赖的文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在更改&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; Components 时将会使组件局部刷新而不是全局刷新。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;发布配置&lt;/h3&gt;

&lt;p&gt;一个项目通常会有一个两个配置文件，一个开发时使用一个发布的时候使用。&lt;/p&gt;

&lt;p&gt;复制一份&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;重名为&lt;code class=&quot;highlighter-rouge&quot;&gt;build.config.js&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;把开发的一些配置删除&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//bulid.config.js
...
module.exports = {
    output:{
        ...
        filename:&#39;bundle.[hash].js&#39;
    }
    ...
    plugins: [
        //每次打包都会重新生成html文件
        new HtmlWebpackPlugin(),
        ...
        //用来提取entry里面设置的common，把里面的js合并成common.js
        new Webpack.optimize.CommonsChunkPlugin(&#39;common&#39;, &#39;common.[hash].js&#39;),
        //压缩js
        new Webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false
            }
        }),
    ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[hash]&lt;/code&gt;根据文件变化生成唯一的hash，上线时可以避免缓存&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改文件：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//package.json  
&quot;scripts&quot;: {
    &quot;bulid&quot;:&quot;webpack --config bulid.config.js&quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run bulid&lt;/code&gt;,最终项目结构如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app
    &lt;ul&gt;
      &lt;li&gt;components
        &lt;ul&gt;
          &lt;li&gt;ColorCtrl.jsx&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;static
        &lt;ul&gt;
          &lt;li&gt;css
            &lt;ul&gt;
              &lt;li&gt;main.scss&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;images
            &lt;ul&gt;
              &lt;li&gt;monkey.png&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;entry.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;public
    &lt;ul&gt;
      &lt;li&gt;index.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demohttpsgithubcomdengrc0-0webpack-react-dome&quot;&gt;&lt;a href=&quot;https://github.com/Dengrc0-0/webpack-react-dome&quot;&gt;Demo&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/Dengrc0-0/webpack-react-dome
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://dengrc.com/2016/04/23/Webpack%E5%B0%8F%E7%BB%93/</link>
        <guid isPermaLink="true">http://dengrc.com/2016/04/23/Webpack%E5%B0%8F%E7%BB%93/</guid>
        
        
        <category>学习</category>
        
      </item>
    
      <item>
        <title>开发中遇到的坑爹事</title>
        <description>&lt;h3 id=&quot;ueditor2016-04-13&quot;&gt;关于百度UEditor公式插件的坑——2016-04-13&lt;/h3&gt;

&lt;p&gt;因为项目中某些功能需要用到插入公式，所以就去看了下 &lt;a href=&quot;http://ueditor.baidu.com/website/kityformula.html&quot;&gt;百度UEditor公式插件&lt;/a&gt;。按照官网上的demo引入到现有项目后发现报错:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uncaught TypeError: target.node.getTransformToElement is not a function
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;感谢&lt;a href=&quot;http://kanpiaoxue.iteye.com/blog/2278719&quot;&gt;@kanpiaoxue&lt;/a&gt;提供的博文.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;小小的吐槽下插件作者居然不去优化&lt;/p&gt;

&lt;p&gt;这是因为Chrome V.48版本后移除了&lt;code class=&quot;highlighter-rouge&quot;&gt;SVGElement.getTransformToElement&lt;/code&gt;函数,而导致在Chrome V.48及以上版本使用该插件会报错，只需要在插件根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;kityFormulaDialog.html&lt;/code&gt;文件中引入以下代码:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(toElement) {
    return toElement.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;引入以后就可以尽情的玩耍了！&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;configjs2016-04-12&quot;&gt;某个神奇的config.js——2016-04-12&lt;/h3&gt;

&lt;p&gt;今天在改某个&lt;code class=&quot;highlighter-rouge&quot;&gt;config.js&lt;/code&gt;的时候，刷新浏览器发现并没有变化，我第一反映就是有缓存，默默的清掉了浏览器缓存后再刷新。这时神奇的事情发生了，文件居然还是没有改变！！！&lt;br /&gt;
然后我就纠结了一阵，后面发现Chrome浏览器的清除指定时间段内的数据被设置成了…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过去一小时！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过去一小时！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过去一小时！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;无力吐槽自己了~&lt;br /&gt;
下次再遇到那么灵异的事情果断会淡定了。&lt;br /&gt;
如果方便的情况下还是默默的在文件后面加版本号吧！&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://dengrc.com/2016/04/12/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E7%88%B9%E4%BA%8B/</link>
        <guid isPermaLink="true">http://dengrc.com/2016/04/12/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E7%88%B9%E4%BA%8B/</guid>
        
        
        <category>学习</category>
        
      </item>
    
      <item>
        <title>Markdown语法</title>
        <description>&lt;h3 id=&quot;blogmarkdownmarkdown&quot;&gt;把blog搭建完想开始写博文的时候,才发现博文需要使用Markdown标记语言来编写,然后在网上看了一下Markdown标记语言的语法,顺便收录了下来。&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;markdown&quot;&gt;下列是Markdown的语法：&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;引用 &amp;gt;引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;h1h1&quot;&gt;H1:#H1&lt;/h1&gt;

&lt;h2 id=&quot;h2h2&quot;&gt;H2:##H2&lt;/h2&gt;

&lt;h3 id=&quot;h3h3&quot;&gt;H3:###H3&lt;/h3&gt;

&lt;h4 id=&quot;h4h4&quot;&gt;H4:####H4&lt;/h4&gt;

&lt;h5 id=&quot;h5h5&quot;&gt;H5:#####H5&lt;/h5&gt;

&lt;h6 id=&quot;h6h6&quot;&gt;H6:######H6&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;内嵌代码:&lt;/code&gt; `内嵌代码`&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://google.com&quot;&gt;url&lt;/a&gt;：[url](http://google.com)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/dengrc.ico&quot; alt=&quot;&quot; /&gt;：![](http://dengrc.com/dengrc.ico)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;加粗：&lt;/strong&gt; **加粗**&lt;/p&gt;

&lt;p&gt;&lt;em&gt;斜体：&lt;/em&gt; *斜体*&lt;/p&gt;

&lt;p&gt;&lt;del&gt;删除线：&lt;/del&gt; ~~删除线~~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无序列表： * 无序列表&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;有序列表： 1. 有序列表&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 08 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://dengrc.com/2016/04/08/Markdown%E8%AF%AD%E6%B3%95/</link>
        <guid isPermaLink="true">http://dengrc.com/2016/04/08/Markdown%E8%AF%AD%E6%B3%95/</guid>
        
        
        <category>学习</category>
        
      </item>
    
  </channel>
</rss>
